version: 2.1

commands:
  set-env:
    description: "Set environment variables."
    steps:
      - run:
          name: "Set environment variables."
          command: |
            echo 'export YT_DIR=$HOME/yt-git' >> $BASH_ENV
            echo 'export YTREE_DATA=$HOME/ytree_test' >> $BASH_ENV

  install:
    description: "Install ytree and dependencies."
    parameters:
      ytdev:
        type: integer
        default: 0
    steps:
      - run:
          name: "Install ytree and dependencies."
          no_output_timeout: 20m
          command: |
            sudo apt-get update
            sudo apt-get install -y graphviz libopenmpi-dev openmpi-bin
            if [ ! -d $HOME/venv ]; then
                python3 -m venv $HOME/venv
            fi
            source $BASH_ENV
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install Cython numpy
            pip install girder-client
            export MAX_BUILD_CORES=2
            if [ << parameters.ytdev >> == 1 ]; then
                if [ ! -f $YT_DIR/README.md ]; then
                    git clone --branch=main https://github.com/yt-project/yt $YT_DIR
                fi
                pushd $YT_DIR
                git pull origin main
                git checkout main
                pip install -e .
                popd
            fi
            pip install -e .[dev,parallel]

  configure-ytree:
    description: "Configure ytree."
    steps:
      - run:
          name: "Configure ytree."
          command: |
            # configure ytree
            mkdir -p $HOME/.config/ytree
            echo "[ytree]" > $HOME/.config/ytree/ytreerc
            echo "test_data_dir = $YTREE_DATA" >> $HOME/.config/ytree/ytreerc

  download-test-data:
    description: "Download test data."
    steps:
      - run:
          name: "Download test data."
          command: |
            # download test data
            if [ ! -d $YTREE_DATA/rockstar ]; then
                source $BASH_ENV
                source $HOME/venv/bin/activate
                girder-cli --api-url https://girder.hub.yt/api/v1 download 59835a1ee2a67400016a2cda $YTREE_DATA
            fi

  lint:
    description: "Lint."
    steps:
      - run:
          name: "Lint."
          command: |
            if [ ! -d $HOME/venv ]; then
                python3 -m venv $HOME/venv
            fi
            source $BASH_ENV
            source $HOME/venv/bin/activate
            pip install flake8
            flake8 tests ytree doc/source/examples

  run-tests:
    description: "Build ytree and run tests."
    parameters:
      coverage:
        type: integer
        default: 0
      pytestkwargs:
        type: string

    steps:
      - run:
          name: "Build ytree and run tests."
          no_output_timeout: 30m
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            TESTFILES=$(circleci tests glob "tests/*.py" "tests/frontends/*.py" | circleci tests split --split-by=timings)
            pytest --cov=ytree --junitxml=test-results/junit.xml << parameters.pytestkwargs >> $TESTFILES
            python fix-junit.py test-results/junit.xml
            if [ << parameters.coverage >> == 1 ]; then
                # code coverage report
                codecov
            fi
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

  build-docs:
    description: "Test the docs build."
    steps:
      - run:
          name: "Test the docs build."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            cd doc/source
            python -m sphinx -M html "." "_build" -W

executors:
  python:
    parameters:
      tag:
        type: string
        default: latest
    docker:
      - image: cimg/python:<< parameters.tag >>

jobs:
  linting:
    resource_class: small
    parameters:
      tag:
        type: string
        default: latest
    working_directory: ~/ytree
    steps:
      - checkout
      - set-env
      - lint
    executor:
      name: python
      tag: << parameters.tag >>

  tests:
    parameters:
      tag:
        type: string
        default: latest
      parallelism:
        type: integer
        default: 4
      resource_class:
        type: string
        default: medium
      ytdev:
        type: integer
        default: 0
      coverage:
        type: integer
        default: 0
      pytestkwargs:
        type: string
    parallelism: << parameters.parallelism >>
    resource_class: << parameters.resource_class >>
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/ytree

    steps:
      - checkout
      - set-env

      - restore_cache:
          name: "Restore dependencies cache."
          key: python-<< parameters.tag >>-<< parameters.ytdev >>-dependencies-aberson

      - install:
          ytdev: << parameters.ytdev >>
      - configure-ytree

      - save_cache:
          name: "Save dependencies cache."
          key: python-<< parameters.tag >>-<< parameters.ytdev >>-dependencies-aberson
          paths:
            - ~/.cache/pip
            - ~/venv
            - ~/yt-git

      - restore_cache:
          name: "Restore test data cache."
          key: test-data-abernathy

      - download-test-data

      - save_cache:
          name: "Save test data cache."
          key: test-data-abernathy
          paths:
            - ~/ytree_test

      - run-tests:
          coverage: << parameters.coverage >>
          pytestkwargs: << parameters.pytestkwargs >>

  docs-test:
    resource_class: small
    parameters:
      tag:
        type: string
        default: latest
      ytdev:
        type: integer
        default: 0
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/ytree

    steps:
      - checkout
      - set-env

      - restore_cache:
          name: "Restore dependencies cache."
          key: python-<< parameters.tag >>-<< parameters.ytdev >>-dependencies-aberson

      - install:
          ytdev: << parameters.ytdev >>
      - configure-ytree

      - build-docs

workflows:
   version: 2

   normal-tests:
     jobs:
       - linting:
           name: "linting"
           tag: "3.12.7"

       - tests:
           requires:
             - linting
           name: "Python 3.9 tests"
           tag: "3.9.20"
           ytdev: 0
           pytestkwargs: "--serialonly"

       - tests:
           requires:
             - linting
           name: "Python 3.12 tests"
           tag: "3.12.7"
           coverage: 1
           ytdev: 1
           pytestkwargs: "--serialonly"

       - tests:
           requires:
             - linting
           name: "Python 3.12 tests"
           tag: "3.12.7"
           coverage: 0
           ytdev: 0
           pytestkwargs: "--serialonly"

       - docs-test:
           name: "Test docs build"
           tag: "3.12.7"
           ytdev: 0

   weekly:
     triggers:
       - schedule:
           cron: "0 0 * * 3"
           filters:
            branches:
              only:
                - main
     jobs:
       - tests:
           name: "Python 3.9 tests"
           tag: "3.9.20"
           ytdev: 0
           pytestkwargs: "--serialonly"

       - tests:
           name: "Python 3.12 tests"
           tag: "3.12.7"
           coverage: 0
           ytdev: 1
           pytestkwargs: "--serialonly"

       - docs-test:
           name: "Test docs build"
           tag: "3.12.7"
           ytdev: 0
